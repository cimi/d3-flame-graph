(function() {
  var convert, maxDepth;

  convert = function(rawData) {
    var child, childSum, fillerNode, i, j, len, len1, node, ref, ref1, state, subTree, timeElapsed, timeFormat, value;
    value = 0;
    ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
    for (i = 0, len = ref.length; i < len; i++) {
      state = ref[i];
      if (!isNaN(rawData.c[state])) {
        value += rawData.c[state];
      }
    }
    timeElapsed = new Date();
    timeElapsed.setSeconds(value);
    timeFormat = countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS;
    node = {
      name: rawData.n,
      value: value,
      samples: value,
      totalTime: countdown(new Date(), timeElapsed, timeFormat),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    childSum = 0;
    ref1 = rawData.a;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      child = ref1[j];
      subTree = convert(child);
      if (subTree) {
        node.children.push(subTree);
        childSum += subTree.value;
      }
    }
    if (childSum < node.value) {
      fillerNode = {
        name: '',
        value: node.value - childSum,
        samples: node.value - childSum,
        opacity: 0,
        type: 'filler'
      };
      node.children.push(fillerNode);
    }
    return node;
  };

  maxDepth = function(node) {
    var max;
    if (!node) {
      return 0;
    }
    if (!node.children) {
      return 1;
    }
    if (node.maxDepth) {
      return node.maxDepth;
    }
    max = 0;
    node.children.forEach(function(child) {
      var depth;
      depth = maxDepth(child);
      if (depth > max) {
        return max = depth;
      }
    });
    node.maxDepth = max + 1;
    return node.maxDepth;
  };

  d3.json("data/profile.json", function(err, data) {
    var profile;
    profile = convert(data.profile);
    maxDepth(profile);
    return d3.flameGraph().size([1200, 600]).cellHeight(10).data(profile).breadcrumbs('.breadcrumb').tooltip(true).render('#d3-flame-graph');
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNhbXBsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQSxNQUFBOztFQUFBLE9BQUEsR0FBVSxTQUFDLE9BQUQ7QUFDUixRQUFBO0lBQUEsS0FBQSxHQUFRO0FBQ1I7QUFBQSxTQUFBLHFDQUFBOztNQUNFLElBQTZCLENBQUksS0FBQSxDQUFNLE9BQU8sQ0FBQyxDQUFFLENBQUEsS0FBQSxDQUFoQixDQUFqQztRQUFBLEtBQUEsSUFBUyxPQUFPLENBQUMsQ0FBRSxDQUFBLEtBQUEsRUFBbkI7O0FBREY7SUFHQSxXQUFBLEdBQWtCLElBQUEsSUFBQSxDQUFBO0lBQ2xCLFdBQVcsQ0FBQyxVQUFaLENBQXVCLEtBQXZCO0lBQ0EsVUFBQSxHQUFhLFNBQVMsQ0FBQyxJQUFWLEdBQWlCLFNBQVMsQ0FBQyxLQUEzQixHQUFtQyxTQUFTLENBQUMsT0FBN0MsR0FBdUQsU0FBUyxDQUFDO0lBQzlFLElBQUEsR0FDRTtNQUFBLElBQUEsRUFBTSxPQUFPLENBQUMsQ0FBZDtNQUNBLEtBQUEsRUFBTyxLQURQO01BRUEsT0FBQSxFQUFTLEtBRlQ7TUFHQSxTQUFBLEVBQVcsU0FBQSxDQUFjLElBQUEsSUFBQSxDQUFBLENBQWQsRUFBc0IsV0FBdEIsRUFBbUMsVUFBbkMsQ0FIWDtNQUlBLFFBQUEsRUFBVSxFQUpWOztJQU9GLElBQWUsQ0FBSSxPQUFPLENBQUMsQ0FBM0I7QUFBQSxhQUFPLEtBQVA7O0lBRUEsUUFBQSxHQUFXO0FBQ1g7QUFBQSxTQUFBLHdDQUFBOztNQUNFLE9BQUEsR0FBVSxPQUFBLENBQVEsS0FBUjtNQUNWLElBQUcsT0FBSDtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBZCxDQUFtQixPQUFuQjtRQUNBLFFBQUEsSUFBWSxPQUFPLENBQUMsTUFGdEI7O0FBRkY7SUFNQSxJQUFHLFFBQUEsR0FBVyxJQUFJLENBQUMsS0FBbkI7TUFDRSxVQUFBLEdBQ0U7UUFBQSxJQUFBLEVBQU0sRUFBTjtRQUNBLEtBQUEsRUFBTyxJQUFJLENBQUMsS0FBTCxHQUFhLFFBRHBCO1FBRUEsT0FBQSxFQUFTLElBQUksQ0FBQyxLQUFMLEdBQWEsUUFGdEI7UUFHQSxPQUFBLEVBQVMsQ0FIVDtRQUlBLElBQUEsRUFBTSxRQUpOOztNQUtGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBZCxDQUFtQixVQUFuQixFQVBGOztXQVNBO0VBbENROztFQXNDVixRQUFBLEdBQVcsU0FBQyxJQUFEO0FBQ1QsUUFBQTtJQUFBLElBQVksQ0FBSSxJQUFoQjtBQUFBLGFBQU8sRUFBUDs7SUFDQSxJQUFZLENBQUksSUFBSSxDQUFDLFFBQXJCO0FBQUEsYUFBTyxFQUFQOztJQUNBLElBQXdCLElBQUksQ0FBQyxRQUE3QjtBQUFBLGFBQU8sSUFBSSxDQUFDLFNBQVo7O0lBRUEsR0FBQSxHQUFNO0lBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFkLENBQXNCLFNBQUMsS0FBRDtBQUNwQixVQUFBO01BQUEsS0FBQSxHQUFRLFFBQUEsQ0FBUyxLQUFUO01BQ1IsSUFBZSxLQUFBLEdBQVEsR0FBdkI7ZUFBQSxHQUFBLEdBQU0sTUFBTjs7SUFGb0IsQ0FBdEI7SUFJQSxJQUFJLENBQUMsUUFBTCxHQUFnQixHQUFBLEdBQU07QUFDdEIsV0FBTyxJQUFJLENBQUM7RUFYSDs7RUFhWCxFQUFFLENBQUMsSUFBSCxDQUFRLG1CQUFSLEVBQTZCLFNBQUMsR0FBRCxFQUFNLElBQU47QUFFM0IsUUFBQTtJQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsSUFBSSxDQUFDLE9BQWI7SUFDVixRQUFBLENBQVMsT0FBVDtXQUVBLEVBQUUsQ0FBQyxVQUFILENBQUEsQ0FDRSxDQUFDLElBREgsQ0FDUSxDQUFDLElBQUQsRUFBTyxHQUFQLENBRFIsQ0FDb0IsQ0FBQyxVQURyQixDQUNnQyxFQURoQyxDQUVFLENBQUMsSUFGSCxDQUVRLE9BRlIsQ0FHRSxDQUFDLFdBSEgsQ0FHZSxhQUhmLENBSUUsQ0FBQyxPQUpILENBSVcsSUFKWCxDQUtFLENBQUMsTUFMSCxDQUtVLGlCQUxWO0VBTDJCLENBQTdCO0FBbkRBIiwiZmlsZSI6ImRlbW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIGZ1bmN0aW9uIHRoYXQgY29udmVydHMgZnJvbSBhIHBhcnRpY3VsYXIgZGF0YSBmb3JtYXQgaW50byB0aGUgZ2VuZXJpYyBvbmVcbiMgZXhwZWN0ZWQgYnkgdGhlIHBsdWdpblxuY29udmVydCA9IChyYXdEYXRhKSAtPlxuICB2YWx1ZSA9IDBcbiAgZm9yIHN0YXRlIGluIFsnUlVOTkFCTEUnLCAnQkxPQ0tFRCcsICdUSU1FRF9XQUlUSU5HJywgJ1dBSVRJTkcnXVxuICAgIHZhbHVlICs9IHJhd0RhdGEuY1tzdGF0ZV0gaWYgbm90IGlzTmFOKHJhd0RhdGEuY1tzdGF0ZV0pXG5cbiAgdGltZUVsYXBzZWQgPSBuZXcgRGF0ZSgpXG4gIHRpbWVFbGFwc2VkLnNldFNlY29uZHModmFsdWUpXG4gIHRpbWVGb3JtYXQgPSBjb3VudGRvd24uREFZUyB8IGNvdW50ZG93bi5IT1VSUyB8IGNvdW50ZG93bi5NSU5VVEVTIHwgY291bnRkb3duLlNFQ09ORFNcbiAgbm9kZSA9XG4gICAgbmFtZTogcmF3RGF0YS5uLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzYW1wbGVzOiB2YWx1ZVxuICAgIHRvdGFsVGltZTogY291bnRkb3duKG5ldyBEYXRlKCksIHRpbWVFbGFwc2VkLCB0aW1lRm9ybWF0KVxuICAgIGNoaWxkcmVuOiBbXVxuXG4gICMgdGhlIGEgZmllbGQgaXMgdGhlIGxpc3Qgb2YgY2hpbGRyZW5cbiAgcmV0dXJuIG5vZGUgaWYgbm90IHJhd0RhdGEuYVxuXG4gIGNoaWxkU3VtID0gMFxuICBmb3IgY2hpbGQgaW4gcmF3RGF0YS5hXG4gICAgc3ViVHJlZSA9IGNvbnZlcnQoY2hpbGQpXG4gICAgaWYgc3ViVHJlZVxuICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKHN1YlRyZWUpXG4gICAgICBjaGlsZFN1bSArPSBzdWJUcmVlLnZhbHVlXG5cbiAgaWYgY2hpbGRTdW0gPCBub2RlLnZhbHVlXG4gICAgZmlsbGVyTm9kZSA9XG4gICAgICBuYW1lOiAnJ1xuICAgICAgdmFsdWU6IG5vZGUudmFsdWUgLSBjaGlsZFN1bVxuICAgICAgc2FtcGxlczogbm9kZS52YWx1ZSAtIGNoaWxkU3VtXG4gICAgICBvcGFjaXR5OiAwXG4gICAgICB0eXBlOiAnZmlsbGVyJ1xuICAgIG5vZGUuY2hpbGRyZW4ucHVzaChmaWxsZXJOb2RlKVxuXG4gIG5vZGVcblxuIyBhdWdtZW50cyBlYWNoIG5vZGUgaW4gdGhlIHRyZWUgd2l0aCB0aGUgbWF4aW11bSBkaXN0YW5jZVxuIyBpdCBpcyBmcm9tIGEgdGVybWluYWwgbm9kZVxubWF4RGVwdGggPSAobm9kZSkgLT5cbiAgcmV0dXJuIDAgaWYgbm90IG5vZGVcbiAgcmV0dXJuIDEgaWYgbm90IG5vZGUuY2hpbGRyZW5cbiAgcmV0dXJuIG5vZGUubWF4RGVwdGggaWYgbm9kZS5tYXhEZXB0aFxuXG4gIG1heCA9IDBcbiAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoIChjaGlsZCkgLT5cbiAgICBkZXB0aCA9IG1heERlcHRoKGNoaWxkKVxuICAgIG1heCA9IGRlcHRoIGlmIGRlcHRoID4gbWF4XG5cbiAgbm9kZS5tYXhEZXB0aCA9IG1heCArIDFcbiAgcmV0dXJuIG5vZGUubWF4RGVwdGhcblxuZDMuanNvbiBcImRhdGEvcHJvZmlsZS5qc29uXCIsIChlcnIsIGRhdGEpIC0+XG5cbiAgcHJvZmlsZSA9IGNvbnZlcnQoZGF0YS5wcm9maWxlKVxuICBtYXhEZXB0aChwcm9maWxlKVxuXG4gIGQzLmZsYW1lR3JhcGgoKVxuICAgIC5zaXplKFsxMjAwLCA2MDBdKS5jZWxsSGVpZ2h0KDEwKVxuICAgIC5kYXRhKHByb2ZpbGUpXG4gICAgLmJyZWFkY3J1bWJzKCcuYnJlYWRjcnVtYicpXG4gICAgLnRvb2x0aXAodHJ1ZSlcbiAgICAucmVuZGVyKCcjZDMtZmxhbWUtZ3JhcGgnKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==