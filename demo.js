(function() {
  var convert;

  convert = function(rawData) {
    var child, j, k, len, len1, node, ref, ref1, state, subTree, timeElapsed, timeFormat, value;
    value = 0;
    ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
    for (j = 0, len = ref.length; j < len; j++) {
      state = ref[j];
      if (!isNaN(rawData.c[state])) {
        value += rawData.c[state];
      }
    }
    timeElapsed = new Date();
    timeElapsed.setSeconds(value);
    timeFormat = countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS;
    node = {
      name: rawData.n,
      value: value,
      time: countdown(new Date(), timeElapsed, timeFormat),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    ref1 = rawData.a;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      child = ref1[k];
      subTree = convert(child);
      if (subTree) {
        node.children.push(subTree);
      }
    }
    return node;
  };

  d3.json("data/profile.json", function(err, data) {
    var flameGraph, profile, tooltip;
    profile = convert(data.profile);
    tooltip = function(d) {
      return d.name + " <br /><br /> " + d.value + " samples<br /> " + (((d.value / profile.value) * 100).toFixed(2)) + "% of total";
    };
    flameGraph = d3.flameGraph().size([1200, 600]).cellHeight(20).data(profile).zoomEnabled(true).zoomAction(function(d) {
      return console.log(d);
    }).tooltip(tooltip).render('#d3-flame-graph');
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(/java\.util.*/);
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    return d3.select('#zoom').on('click', function() {
      var node;
      node = flameGraph.select(/java\.util\.concurrent.*/, false)[0];
      return flameGraph.zoom(node);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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RGY7RUFuQjJCLENBQTdCO0FBdkJBIiwiZmlsZSI6ImRlbW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIGZ1bmN0aW9uIHRoYXQgY29udmVydHMgZnJvbSBhIHBhcnRpY3VsYXIgZGF0YSBmb3JtYXQgaW50byB0aGUgZ2VuZXJpYyBvbmVcbiMgZXhwZWN0ZWQgYnkgdGhlIHBsdWdpblxuY29udmVydCA9IChyYXdEYXRhKSAtPlxuICB2YWx1ZSA9IDBcbiAgZm9yIHN0YXRlIGluIFsnUlVOTkFCTEUnLCAnQkxPQ0tFRCcsICdUSU1FRF9XQUlUSU5HJywgJ1dBSVRJTkcnXVxuICAgIHZhbHVlICs9IHJhd0RhdGEuY1tzdGF0ZV0gaWYgbm90IGlzTmFOKHJhd0RhdGEuY1tzdGF0ZV0pXG5cbiAgdGltZUVsYXBzZWQgPSBuZXcgRGF0ZSgpXG4gIHRpbWVFbGFwc2VkLnNldFNlY29uZHModmFsdWUpXG4gIHRpbWVGb3JtYXQgPSBjb3VudGRvd24uREFZUyB8IGNvdW50ZG93bi5IT1VSUyB8IGNvdW50ZG93bi5NSU5VVEVTIHwgY291bnRkb3duLlNFQ09ORFNcbiAgbm9kZSA9XG4gICAgbmFtZTogcmF3RGF0YS5uLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB0aW1lOiBjb3VudGRvd24obmV3IERhdGUoKSwgdGltZUVsYXBzZWQsIHRpbWVGb3JtYXQpXG4gICAgY2hpbGRyZW46IFtdXG5cbiAgIyB0aGUgYSBmaWVsZCBpcyB0aGUgbGlzdCBvZiBjaGlsZHJlblxuICByZXR1cm4gbm9kZSBpZiBub3QgcmF3RGF0YS5hXG4gIGZvciBjaGlsZCBpbiByYXdEYXRhLmFcbiAgICBzdWJUcmVlID0gY29udmVydChjaGlsZClcbiAgICBpZiBzdWJUcmVlXG4gICAgICBub2RlLmNoaWxkcmVuLnB1c2goc3ViVHJlZSlcblxuICBub2RlXG5cbmQzLmpzb24gXCJkYXRhL3Byb2ZpbGUuanNvblwiLCAoZXJyLCBkYXRhKSAtPlxuICBwcm9maWxlID0gY29udmVydChkYXRhLnByb2ZpbGUpXG4gIHRvb2x0aXAgPSAoZCkgLT4gXCIje2QubmFtZX0gPGJyIC8+PGJyIC8+XG4gICAgI3tkLnZhbHVlfSBzYW1wbGVzPGJyIC8+XG4gICAgI3soKGQudmFsdWUgLyBwcm9maWxlLnZhbHVlKSAqIDEwMCkudG9GaXhlZCgyKX0lIG9mIHRvdGFsXCJcbiAgZmxhbWVHcmFwaCA9IGQzLmZsYW1lR3JhcGgoKVxuICAgIC5zaXplKFsxMjAwLCA2MDBdKVxuICAgIC5jZWxsSGVpZ2h0KDIwKVxuICAgIC5kYXRhKHByb2ZpbGUpXG4gICAgLnpvb21FbmFibGVkKHRydWUpXG4gICAgLnpvb21BY3Rpb24oKGQpIC0+IGNvbnNvbGUubG9nKGQpKVxuICAgIC50b29sdGlwKHRvb2x0aXApXG4gICAgLnJlbmRlcignI2QzLWZsYW1lLWdyYXBoJylcblxuICBkMy5zZWxlY3QoJyNoaWdobGlnaHQnKVxuICAgIC5vbiAnY2xpY2snLCAoKSAtPlxuICAgICAgbm9kZXMgPSBmbGFtZUdyYXBoLnNlbGVjdCgvamF2YVxcLnV0aWwuKi8pXG4gICAgICBub2Rlcy5jbGFzc2VkKFwiaGlnaGxpZ2h0XCIsIChkLCBpKSAtPiBub3QgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJoaWdobGlnaHRcIikpXG5cbiAgZDMuc2VsZWN0KCcjem9vbScpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICAjIGp1bXAgdG8gdGhlIGZpcnN0IGphdmEudXRpbC5jb25jdXJyZW50IG1ldGhvZCB3ZSBjYW4gZmluZFxuICAgICAgbm9kZSA9IGZsYW1lR3JhcGguc2VsZWN0KC9qYXZhXFwudXRpbFxcLmNvbmN1cnJlbnQuKi8sIGZhbHNlKVswXVxuICAgICAgZmxhbWVHcmFwaC56b29tKG5vZGUpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
