(function() {
  var convert, runnableVals;

  window.debugging = true;

  runnableVals = [];

  convert = function(rawData, valueFunc) {
    var child, j, len, node, ref, subTree;
    if (rawData.c['RUNNABLE']) {
      runnableVals.push(rawData.c['RUNNABLE']);
    }
    node = {
      name: rawData.n,
      value: valueFunc(rawData),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    ref = rawData.a;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      subTree = convert(child, valueFunc);
      if (subTree) {
        node.children.push(subTree);
      }
    }
    return node;
  };

  d3.json("data/profile.json", function(err, data) {
    var allStates, flameGraph, profile, tooltip, unhide;
    allStates = function(node) {
      var j, len, ref, state, value;
      value = 0;
      ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
      for (j = 0, len = ref.length; j < len; j++) {
        state = ref[j];
        if (!isNaN(node.c[state])) {
          value += node.c[state];
        }
      }
      return value;
    };
    profile = convert(data.profile, allStates);
    console.log(runnableVals.sort(function(a, b) {
      return a - b;
    }));
    tooltip = function(d) {
      return d.name + " <br /><br /> " + d.value + " samples<br /> " + (((d.value / profile.value) * 100).toFixed(2)) + "% of total";
    };
    flameGraph = d3.flameGraph('#d3-flame-graph', profile).size([1200, 600]).cellHeight(20).zoomEnabled(true).tooltip(tooltip).render();
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(function(d) {
        return /java\.util.*/.test(d.name);
      });
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    d3.select('#zoom').on('click', function() {
      var node;
      node = flameGraph.select((function(d) {
        return /CountDownLatch\.await$/.test(d.name);
      }), false)[0];
      return flameGraph.zoom(node);
    });
    unhide = false;
    d3.select('#hide').on('click', function() {
      flameGraph.hide((function(d) {
        return /Unsafe\.park$/.test(d.name) || /Object\.wait$/.test(d.name);
      }), unhide);
      return unhide = !unhide;
    });
    return d3.select('#runnable').on('click', function() {
      profile = convert(data.profile, (function(node) {
        if (node.c['RUNNABLE']) {
          return node.c['RUNNABLE'];
        } else {
          return 0;
        }
      }));
      return flameGraph = d3.flameGraph('#d3-flame-graph', profile).size([1200, 600]).cellHeight(20).zoomEnabled(true).tooltip(tooltip).render();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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ZGVtby5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMgZnVuY3Rpb24gdGhhdCBjb252ZXJ0cyBmcm9tIGEgcGFydGljdWxhciBkYXRhIGZvcm1hdCBpbnRvIHRoZSBnZW5lcmljIG9uZVxuIyBleHBlY3RlZCBieSB0aGUgcGx1Z2luXG53aW5kb3cuZGVidWdnaW5nID0gdHJ1ZVxuXG5ydW5uYWJsZVZhbHMgPSBbXVxuY29udmVydCA9IChyYXdEYXRhLCB2YWx1ZUZ1bmMpIC0+XG5cbiAgIyB0aW1lRWxhcHNlZCA9IG5ldyBEYXRlKClcbiAgIyB0aW1lRWxhcHNlZC5zZXRTZWNvbmRzKHZhbHVlKVxuICAjIHRpbWVGb3JtYXQgPSBjb3VudGRvd24uREFZUyB8IGNvdW50ZG93bi5IT1VSUyB8IGNvdW50ZG93bi5NSU5VVEVTIHwgY291bnRkb3duLlNFQ09ORFNcbiAgcnVubmFibGVWYWxzLnB1c2gocmF3RGF0YS5jWydSVU5OQUJMRSddKSBpZiByYXdEYXRhLmNbJ1JVTk5BQkxFJ11cbiAgbm9kZSA9XG4gICAgbmFtZTogcmF3RGF0YS5uLFxuICAgIHZhbHVlOiB2YWx1ZUZ1bmMocmF3RGF0YSksXG4gICAgIyB0aW1lOiBjb3VudGRvd24obmV3IERhdGUoKSwgdGltZUVsYXBzZWQsIHRpbWVGb3JtYXQpXG4gICAgY2hpbGRyZW46IFtdXG5cbiAgIyB0aGUgYSBmaWVsZCBpcyB0aGUgbGlzdCBvZiBjaGlsZHJlblxuICByZXR1cm4gbm9kZSBpZiBub3QgcmF3RGF0YS5hXG4gIGZvciBjaGlsZCBpbiByYXdEYXRhLmFcbiAgICBzdWJUcmVlID0gY29udmVydChjaGlsZCwgdmFsdWVGdW5jKVxuICAgIGlmIHN1YlRyZWVcbiAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaChzdWJUcmVlKVxuICBub2RlXG5cbmQzLmpzb24gXCJkYXRhL3Byb2ZpbGUuanNvblwiLCAoZXJyLCBkYXRhKSAtPlxuICBhbGxTdGF0ZXMgPSAobm9kZSkgLT5cbiAgICB2YWx1ZSA9IDBcbiAgICBmb3Igc3RhdGUgaW4gWydSVU5OQUJMRScsICdCTE9DS0VEJywgJ1RJTUVEX1dBSVRJTkcnLCAnV0FJVElORyddXG4gICAgICB2YWx1ZSArPSBub2RlLmNbc3RhdGVdIGlmIG5vdCBpc05hTihub2RlLmNbc3RhdGVdKVxuICAgIHZhbHVlXG5cblxuICBwcm9maWxlID0gY29udmVydChkYXRhLnByb2ZpbGUsIGFsbFN0YXRlcylcbiAgY29uc29sZS5sb2cocnVubmFibGVWYWxzLnNvcnQoKGEsIGIpIC0+IGEgLSBiKSlcbiAgdG9vbHRpcCA9IChkKSAtPiBcIiN7ZC5uYW1lfSA8YnIgLz48YnIgLz5cbiAgICAje2QudmFsdWV9IHNhbXBsZXM8YnIgLz5cbiAgICAjeygoZC52YWx1ZSAvIHByb2ZpbGUudmFsdWUpICogMTAwKS50b0ZpeGVkKDIpfSUgb2YgdG90YWxcIlxuICBmbGFtZUdyYXBoID0gZDMuZmxhbWVHcmFwaCgnI2QzLWZsYW1lLWdyYXBoJywgcHJvZmlsZSlcbiAgICAuc2l6ZShbMTIwMCwgNjAwXSlcbiAgICAuY2VsbEhlaWdodCgyMClcbiAgICAuem9vbUVuYWJsZWQodHJ1ZSlcbiAgICAjIC56b29tQWN0aW9uKChkKSAtPiBjb25zb2xlLmxvZyhkKSlcbiAgICAudG9vbHRpcCh0b29sdGlwKVxuICAgIC5yZW5kZXIoKVxuXG4gIGQzLnNlbGVjdCgnI2hpZ2hsaWdodCcpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICBub2RlcyA9IGZsYW1lR3JhcGguc2VsZWN0KChkKSAtPiAvamF2YVxcLnV0aWwuKi8udGVzdChkLm5hbWUpKVxuICAgICAgbm9kZXMuY2xhc3NlZChcImhpZ2hsaWdodFwiLCAoZCwgaSkgLT4gbm90IGQzLnNlbGVjdChAKS5jbGFzc2VkKFwiaGlnaGxpZ2h0XCIpKVxuXG4gIGQzLnNlbGVjdCgnI3pvb20nKVxuICAgIC5vbiAnY2xpY2snLCAoKSAtPlxuICAgICAgIyBqdW1wIHRvIHRoZSBmaXJzdCBqYXZhLnV0aWwuY29uY3VycmVudCBtZXRob2Qgd2UgY2FuIGZpbmRcbiAgICAgIG5vZGUgPSBmbGFtZUdyYXBoLnNlbGVjdCgoKGQpIC0+IC9Db3VudERvd25MYXRjaFxcLmF3YWl0JC8udGVzdChkLm5hbWUpKSwgZmFsc2UpWzBdXG4gICAgICBmbGFtZUdyYXBoLnpvb20obm9kZSlcblxuICAjIGhhY2t5IHdheSBvZiBpbXBsZW1lbnRpbmcgdG9nZ2xlIGJlaGF2aW91ciwgY2FuJ3QgYmUgYm90aGVyZWQgcmlnaHQgbm93XG4gIHVuaGlkZSA9IGZhbHNlXG4gIGQzLnNlbGVjdCgnI2hpZGUnKVxuICAgIC5vbiAnY2xpY2snLCAoKSAtPlxuICAgICAgZmxhbWVHcmFwaC5oaWRlICgoZCkgLT4gL1Vuc2FmZVxcLnBhcmskLy50ZXN0KGQubmFtZSkgb3IgL09iamVjdFxcLndhaXQkLy50ZXN0KGQubmFtZSkpLCB1bmhpZGVcbiAgICAgIHVuaGlkZSA9ICF1bmhpZGVcblxuICBkMy5zZWxlY3QoJyNydW5uYWJsZScpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICBwcm9maWxlID0gY29udmVydChkYXRhLnByb2ZpbGUsICgobm9kZSkgLT4gaWYgbm9kZS5jWydSVU5OQUJMRSddIHRoZW4gbm9kZS5jWydSVU5OQUJMRSddIGVsc2UgMCkpXG4gICAgICBmbGFtZUdyYXBoID0gZDMuZmxhbWVHcmFwaCgnI2QzLWZsYW1lLWdyYXBoJywgcHJvZmlsZSlcbiAgICAgICAgLnNpemUoWzEyMDAsIDYwMF0pXG4gICAgICAgIC5jZWxsSGVpZ2h0KDIwKVxuICAgICAgICAuem9vbUVuYWJsZWQodHJ1ZSlcbiAgICAgICAgIyAuem9vbUFjdGlvbigoZCkgLT4gY29uc29sZS5sb2coZCkpXG4gICAgICAgIC50b29sdGlwKHRvb2x0aXApXG4gICAgICAgIC5yZW5kZXIoKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
