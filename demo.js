(function() {
  var convert, runnableVals;

  runnableVals = [];

  convert = function(rawData, valueFunc) {
    var child, j, len, node, ref, subTree;
    node = {
      name: rawData.n,
      value: valueFunc(rawData),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    ref = rawData.a;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      subTree = convert(child, valueFunc);
      if (subTree) {
        node.children.push(subTree);
      }
    }
    return node;
  };

  d3.json("data/profile.json", function(err, data) {
    var allStates, flameGraph, profile, tooltip, unhide;
    allStates = function(node) {
      var j, len, ref, state, value;
      value = 0;
      ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
      for (j = 0, len = ref.length; j < len; j++) {
        state = ref[j];
        if (!isNaN(node.c[state])) {
          value += node.c[state];
        }
      }
      return value;
    };
    profile = convert(data.profile, allStates);
    tooltip = function(d) {
      return d.name + " <br /><br /> " + d.value + " samples<br /> " + (((d.value / profile.value) * 100).toFixed(2)) + "% of total";
    };
    flameGraph = d3.flameGraph('#d3-flame-graph', profile, true).size([1200, 600]).cellHeight(20).zoomEnabled(true).tooltip(tooltip).render();
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(function(d) {
        return /java\.util.*/.test(d.name);
      });
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    d3.select('#zoom').on('click', function() {
      var node;
      node = flameGraph.select((function(d) {
        return /CountDownLatch\.await$/.test(d.name);
      }), false)[0];
      return flameGraph.zoom(node);
    });
    unhide = false;
    d3.select('#hide').on('click', function() {
      flameGraph.hide((function(d) {
        return /Unsafe\.park$/.test(d.name) || /Object\.wait$/.test(d.name);
      }), unhide);
      return unhide = !unhide;
    });
    d3.select('#runnable').on('click', function() {
      profile = convert(data.profile, (function(node) {
        if (node.c['RUNNABLE']) {
          return node.c['RUNNABLE'];
        } else {
          return 0;
        }
      }));
      return flameGraph = d3.flameGraph('#d3-flame-graph', profile).size([1200, 600]).cellHeight(20).zoomEnabled(true).tooltip(tooltip).render();
    });
    return d3.select('#rasta').on('click', function() {
      var rastaMode;
      rastaMode = function(d) {
        var cells, ref, ref1, ref2;
        cells = 600 / 20;
        if ((0 <= (ref = d.depth) && ref < cells / 3)) {
          return '#1E9600';
        }
        if ((cells / 3 <= (ref1 = d.depth) && ref1 < cells * 2 / 3)) {
          return '#FFF200';
        }
        if ((cells * 2 / 3 <= (ref2 = d.depth) && ref2 < cells)) {
          return '#FF0000';
        }
      };
      return flameGraph.color(rastaMode).render();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LEdBQVEsQ0FBUixZQUFpQixDQUFDLENBQUMsTUFBbkIsUUFBQSxHQUEyQixLQUFBLEdBQVEsQ0FBUixHQUFZLENBQXZDLENBQXBCO0FBQUEsaUJBQU8sVUFBUDs7UUFDQSxJQUFvQixDQUFBLEtBQUEsR0FBUSxDQUFSLEdBQVksQ0FBWixZQUFpQixDQUFDLENBQUMsTUFBbkIsUUFBQSxHQUEyQixLQUEzQixDQUFwQjtBQUFBLGlCQUFPLFVBQVA7O01BSlU7YUFLWixVQUFVLENBQUMsS0FBWCxDQUFpQixTQUFqQixDQUEyQixDQUFDLE1BQTVCLENBQUE7SUFOVyxDQURmO0VBOUMyQixDQUE3QjtBQWhCQSIsImZpbGUiOiJkZW1vLmpzIiwic291cmNlc0NvbnRlbnQiOlsicnVubmFibGVWYWxzID0gW11cbmNvbnZlcnQgPSAocmF3RGF0YSwgdmFsdWVGdW5jKSAtPlxuXG4gIG5vZGUgPVxuICAgIG5hbWU6IHJhd0RhdGEubixcbiAgICB2YWx1ZTogdmFsdWVGdW5jKHJhd0RhdGEpLFxuICAgIGNoaWxkcmVuOiBbXVxuXG4gICMgdGhlIGEgZmllbGQgaXMgdGhlIGxpc3Qgb2YgY2hpbGRyZW5cbiAgcmV0dXJuIG5vZGUgaWYgbm90IHJhd0RhdGEuYVxuICBmb3IgY2hpbGQgaW4gcmF3RGF0YS5hXG4gICAgc3ViVHJlZSA9IGNvbnZlcnQoY2hpbGQsIHZhbHVlRnVuYylcbiAgICBpZiBzdWJUcmVlXG4gICAgICBub2RlLmNoaWxkcmVuLnB1c2goc3ViVHJlZSlcbiAgbm9kZVxuXG5kMy5qc29uIFwiZGF0YS9wcm9maWxlLmpzb25cIiwgKGVyciwgZGF0YSkgLT5cbiAgYWxsU3RhdGVzID0gKG5vZGUpIC0+XG4gICAgdmFsdWUgPSAwXG4gICAgZm9yIHN0YXRlIGluIFsnUlVOTkFCTEUnLCAnQkxPQ0tFRCcsICdUSU1FRF9XQUlUSU5HJywgJ1dBSVRJTkcnXVxuICAgICAgdmFsdWUgKz0gbm9kZS5jW3N0YXRlXSBpZiBub3QgaXNOYU4obm9kZS5jW3N0YXRlXSlcbiAgICB2YWx1ZVxuXG5cbiAgcHJvZmlsZSA9IGNvbnZlcnQoZGF0YS5wcm9maWxlLCBhbGxTdGF0ZXMpXG4gIHRvb2x0aXAgPSAoZCkgLT4gXCIje2QubmFtZX0gPGJyIC8+PGJyIC8+XG4gICAgI3tkLnZhbHVlfSBzYW1wbGVzPGJyIC8+XG4gICAgI3soKGQudmFsdWUgLyBwcm9maWxlLnZhbHVlKSAqIDEwMCkudG9GaXhlZCgyKX0lIG9mIHRvdGFsXCJcbiAgZmxhbWVHcmFwaCA9IGQzLmZsYW1lR3JhcGgoJyNkMy1mbGFtZS1ncmFwaCcsIHByb2ZpbGUsIHRydWUpXG4gICAgLnNpemUoWzEyMDAsIDYwMF0pXG4gICAgLmNlbGxIZWlnaHQoMjApXG4gICAgLnpvb21FbmFibGVkKHRydWUpXG4gICAgLnRvb2x0aXAodG9vbHRpcClcbiAgICAucmVuZGVyKClcblxuICBkMy5zZWxlY3QoJyNoaWdobGlnaHQnKVxuICAgIC5vbiAnY2xpY2snLCAoKSAtPlxuICAgICAgbm9kZXMgPSBmbGFtZUdyYXBoLnNlbGVjdCgoZCkgLT4gL2phdmFcXC51dGlsLiovLnRlc3QoZC5uYW1lKSlcbiAgICAgIG5vZGVzLmNsYXNzZWQoXCJoaWdobGlnaHRcIiwgKGQsIGkpIC0+IG5vdCBkMy5zZWxlY3QoQCkuY2xhc3NlZChcImhpZ2hsaWdodFwiKSlcblxuICBkMy5zZWxlY3QoJyN6b29tJylcbiAgICAub24gJ2NsaWNrJywgKCkgLT5cbiAgICAgICMganVtcCB0byB0aGUgZmlyc3QgamF2YS51dGlsLmNvbmN1cnJlbnQgbWV0aG9kIHdlIGNhbiBmaW5kXG4gICAgICBub2RlID0gZmxhbWVHcmFwaC5zZWxlY3QoKChkKSAtPiAvQ291bnREb3duTGF0Y2hcXC5hd2FpdCQvLnRlc3QoZC5uYW1lKSksIGZhbHNlKVswXVxuICAgICAgZmxhbWVHcmFwaC56b29tKG5vZGUpXG5cbiAgdW5oaWRlID0gZmFsc2VcbiAgZDMuc2VsZWN0KCcjaGlkZScpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICBmbGFtZUdyYXBoLmhpZGUgKChkKSAtPiAvVW5zYWZlXFwucGFyayQvLnRlc3QoZC5uYW1lKSBvciAvT2JqZWN0XFwud2FpdCQvLnRlc3QoZC5uYW1lKSksIHVuaGlkZVxuICAgICAgdW5oaWRlID0gIXVuaGlkZVxuXG4gIGQzLnNlbGVjdCgnI3J1bm5hYmxlJylcbiAgICAub24gJ2NsaWNrJywgKCkgLT5cbiAgICAgIHByb2ZpbGUgPSBjb252ZXJ0KGRhdGEucHJvZmlsZSwgKChub2RlKSAtPiBpZiBub2RlLmNbJ1JVTk5BQkxFJ10gdGhlbiBub2RlLmNbJ1JVTk5BQkxFJ10gZWxzZSAwKSlcbiAgICAgIGZsYW1lR3JhcGggPSBkMy5mbGFtZUdyYXBoKCcjZDMtZmxhbWUtZ3JhcGgnLCBwcm9maWxlKVxuICAgICAgICAuc2l6ZShbMTIwMCwgNjAwXSlcbiAgICAgICAgLmNlbGxIZWlnaHQoMjApXG4gICAgICAgIC56b29tRW5hYmxlZCh0cnVlKVxuICAgICAgICAudG9vbHRpcCh0b29sdGlwKVxuICAgICAgICAucmVuZGVyKClcblxuICBkMy5zZWxlY3QoJyNyYXN0YScpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICByYXN0YU1vZGUgPSAoZCkgLT5cbiAgICAgICAgY2VsbHMgPSA2MDAgLyAyMFxuICAgICAgICByZXR1cm4gJyMxRTk2MDAnIGlmIDAgICAgICAgICAgICAgPD0gZC5kZXB0aCA8IGNlbGxzIC8gM1xuICAgICAgICByZXR1cm4gJyNGRkYyMDAnIGlmIGNlbGxzIC8gMyAgICAgPD0gZC5kZXB0aCA8IGNlbGxzICogMiAvIDNcbiAgICAgICAgcmV0dXJuICcjRkYwMDAwJyBpZiBjZWxscyAqIDIgLyAzIDw9IGQuZGVwdGggPCBjZWxsc1xuICAgICAgZmxhbWVHcmFwaC5jb2xvcihyYXN0YU1vZGUpLnJlbmRlcigpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
