(function() {
  var convert, maxDepth;

  convert = function(rawData) {
    var child, childSum, fillerNode, j, k, len, len1, node, ref, ref1, state, subTree, timeElapsed, timeFormat, value;
    value = 0;
    ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
    for (j = 0, len = ref.length; j < len; j++) {
      state = ref[j];
      if (!isNaN(rawData.c[state])) {
        value += rawData.c[state];
      }
    }
    timeElapsed = new Date();
    timeElapsed.setSeconds(value);
    timeFormat = countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS;
    node = {
      name: rawData.n,
      value: value,
      time: countdown(new Date(), timeElapsed, timeFormat),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    childSum = 0;
    ref1 = rawData.a;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      child = ref1[k];
      subTree = convert(child);
      if (subTree) {
        node.children.push(subTree);
        childSum += subTree.value;
      }
    }
    if (childSum < node.value) {
      fillerNode = {
        name: '',
        value: node.value - childSum,
        filler: true
      };
      node.children.push(fillerNode);
    }
    return node;
  };

  maxDepth = function(node) {
    var max;
    if (!node) {
      return 0;
    }
    if (!node.children) {
      return 1;
    }
    if (node.maxDepth) {
      return node.maxDepth;
    }
    max = 0;
    node.children.forEach(function(child) {
      var depth;
      depth = maxDepth(child);
      if (depth > max) {
        return max = depth;
      }
    });
    node.maxDepth = max + 1;
    return node.maxDepth;
  };

  d3.json("data/profile.json", function(err, data) {
    var flameGraph, profile;
    profile = convert(data.profile);
    maxDepth(profile);
    flameGraph = d3.flameGraph().size([1200, 600]).cellHeight(10).data(profile).breadcrumbs('.breadcrumb').tooltip(true).render('#d3-flame-graph');
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(/java\.util.*/);
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    return d3.select('#zoom').on('click', function() {
      var node, root;
      root = d3.select('.flame-graph g g:first-child text').datum();
      if (root.name === 'java.util.concurrent.CountDownLatch.await') {
        return;
      }
      node = flameGraph.select(/java\.util\.concurrent.*/, false)[0];
      return flameGraph.data(node).render('#d3-flame-graph');
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFRLFVBQVUsQ0FBQyxNQUFYLENBQWtCLGNBQWxCO2FBQ1IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxXQUFkLEVBQTJCLFNBQUMsQ0FBRCxFQUFJLENBQUo7ZUFBVSxDQUFJLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixDQUFlLENBQUMsT0FBaEIsQ0FBd0IsV0FBeEI7TUFBZCxDQUEzQjtJQUZXLENBRGY7V0FLQSxFQUFFLENBQUMsTUFBSCxDQUFVLE9BQVYsQ0FDRSxDQUFDLEVBREgsQ0FDTSxPQUROLEVBQ2UsU0FBQTtBQUdYLFVBQUE7TUFBQSxJQUFBLEdBQU8sRUFBRSxDQUFDLE1BQUgsQ0FBVSxtQ0FBVixDQUE4QyxDQUFDLEtBQS9DLENBQUE7TUFDUCxJQUFVLElBQUksQ0FBQyxJQUFMLEtBQWEsMkNBQXZCO0FBQUEsZUFBQTs7TUFHQSxJQUFBLEdBQU8sVUFBVSxDQUFDLE1BQVgsQ0FBa0IsMEJBQWxCLEVBQThDLEtBQTlDLENBQXFELENBQUEsQ0FBQTthQUM1RCxVQUFVLENBQUMsSUFBWCxDQUFnQixJQUFoQixDQUFxQixDQUFDLE1BQXRCLENBQTZCLGlCQUE3QjtJQVJXLENBRGY7RUFqQjJCLENBQTdCO0FBaERBIiwiZmlsZSI6ImRlbW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIGZ1bmN0aW9uIHRoYXQgY29udmVydHMgZnJvbSBhIHBhcnRpY3VsYXIgZGF0YSBmb3JtYXQgaW50byB0aGUgZ2VuZXJpYyBvbmVcbiMgZXhwZWN0ZWQgYnkgdGhlIHBsdWdpblxuY29udmVydCA9IChyYXdEYXRhKSAtPlxuICB2YWx1ZSA9IDBcbiAgZm9yIHN0YXRlIGluIFsnUlVOTkFCTEUnLCAnQkxPQ0tFRCcsICdUSU1FRF9XQUlUSU5HJywgJ1dBSVRJTkcnXVxuICAgIHZhbHVlICs9IHJhd0RhdGEuY1tzdGF0ZV0gaWYgbm90IGlzTmFOKHJhd0RhdGEuY1tzdGF0ZV0pXG5cbiAgdGltZUVsYXBzZWQgPSBuZXcgRGF0ZSgpXG4gIHRpbWVFbGFwc2VkLnNldFNlY29uZHModmFsdWUpXG4gIHRpbWVGb3JtYXQgPSBjb3VudGRvd24uREFZUyB8IGNvdW50ZG93bi5IT1VSUyB8IGNvdW50ZG93bi5NSU5VVEVTIHwgY291bnRkb3duLlNFQ09ORFNcbiAgbm9kZSA9XG4gICAgbmFtZTogcmF3RGF0YS5uLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB0aW1lOiBjb3VudGRvd24obmV3IERhdGUoKSwgdGltZUVsYXBzZWQsIHRpbWVGb3JtYXQpXG4gICAgY2hpbGRyZW46IFtdXG5cbiAgIyB0aGUgYSBmaWVsZCBpcyB0aGUgbGlzdCBvZiBjaGlsZHJlblxuICByZXR1cm4gbm9kZSBpZiBub3QgcmF3RGF0YS5hXG5cbiAgY2hpbGRTdW0gPSAwXG4gIGZvciBjaGlsZCBpbiByYXdEYXRhLmFcbiAgICBzdWJUcmVlID0gY29udmVydChjaGlsZClcbiAgICBpZiBzdWJUcmVlXG4gICAgICBub2RlLmNoaWxkcmVuLnB1c2goc3ViVHJlZSlcbiAgICAgIGNoaWxkU3VtICs9IHN1YlRyZWUudmFsdWVcblxuICBpZiBjaGlsZFN1bSA8IG5vZGUudmFsdWVcbiAgICBmaWxsZXJOb2RlID1cbiAgICAgIG5hbWU6ICcnXG4gICAgICB2YWx1ZTogbm9kZS52YWx1ZSAtIGNoaWxkU3VtXG4gICAgICBmaWxsZXI6IHRydWVcbiAgICBub2RlLmNoaWxkcmVuLnB1c2goZmlsbGVyTm9kZSlcblxuICBub2RlXG5cbiMgYXVnbWVudHMgZWFjaCBub2RlIGluIHRoZSB0cmVlIHdpdGggdGhlIG1heGltdW0gZGlzdGFuY2VcbiMgaXQgaXMgZnJvbSBhIHRlcm1pbmFsIG5vZGVcbm1heERlcHRoID0gKG5vZGUpIC0+XG4gIHJldHVybiAwIGlmIG5vdCBub2RlXG4gIHJldHVybiAxIGlmIG5vdCBub2RlLmNoaWxkcmVuXG4gIHJldHVybiBub2RlLm1heERlcHRoIGlmIG5vZGUubWF4RGVwdGhcblxuICBtYXggPSAwXG4gIG5vZGUuY2hpbGRyZW4uZm9yRWFjaCAoY2hpbGQpIC0+XG4gICAgZGVwdGggPSBtYXhEZXB0aChjaGlsZClcbiAgICBtYXggPSBkZXB0aCBpZiBkZXB0aCA+IG1heFxuXG4gIG5vZGUubWF4RGVwdGggPSBtYXggKyAxXG4gIHJldHVybiBub2RlLm1heERlcHRoXG5cbmQzLmpzb24gXCJkYXRhL3Byb2ZpbGUuanNvblwiLCAoZXJyLCBkYXRhKSAtPlxuXG4gIHByb2ZpbGUgPSBjb252ZXJ0KGRhdGEucHJvZmlsZSlcbiAgbWF4RGVwdGgocHJvZmlsZSlcblxuICBmbGFtZUdyYXBoID0gZDMuZmxhbWVHcmFwaCgpXG4gICAgLnNpemUoWzEyMDAsIDYwMF0pLmNlbGxIZWlnaHQoMTApXG4gICAgLmRhdGEocHJvZmlsZSlcbiAgICAuYnJlYWRjcnVtYnMoJy5icmVhZGNydW1iJylcbiAgICAudG9vbHRpcCh0cnVlKVxuICAgIC5yZW5kZXIoJyNkMy1mbGFtZS1ncmFwaCcpXG5cbiAgZDMuc2VsZWN0KCcjaGlnaGxpZ2h0JylcbiAgICAub24gJ2NsaWNrJywgKCkgLT5cbiAgICAgIG5vZGVzID0gZmxhbWVHcmFwaC5zZWxlY3QoL2phdmFcXC51dGlsLiovKVxuICAgICAgbm9kZXMuY2xhc3NlZChcImhpZ2hsaWdodFwiLCAoZCwgaSkgLT4gbm90IGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiaGlnaGxpZ2h0XCIpKVxuXG4gIGQzLnNlbGVjdCgnI3pvb20nKVxuICAgIC5vbiAnY2xpY2snLCAoKSAtPlxuICAgICAgIyBjaGVjayB0byBzZWUgaWYgdGhlIG5vZGUgaXMgbm90IGFscmVhZHkgc2VsZWN0ZWRcbiAgICAgICMgdGhpcyBjYW4gYmUgZG9uZSBtb3JlIGVsZWdhbnRseSwgdGhpcyBpcyBxdWljayAmIGRpcnR5XG4gICAgICByb290ID0gZDMuc2VsZWN0KCcuZmxhbWUtZ3JhcGggZyBnOmZpcnN0LWNoaWxkIHRleHQnKS5kYXR1bSgpXG4gICAgICByZXR1cm4gaWYgcm9vdC5uYW1lID09ICdqYXZhLnV0aWwuY29uY3VycmVudC5Db3VudERvd25MYXRjaC5hd2FpdCdcblxuICAgICAgIyBwaWNrIHRoZSBmaXJzdCBqYXZhLnV0aWwuY29uY3VycmVudCBtZXRob2QsIHdlIGtub3cgaXQncyB0aGUgb25lIGFib3ZlXG4gICAgICBub2RlID0gZmxhbWVHcmFwaC5zZWxlY3QoL2phdmFcXC51dGlsXFwuY29uY3VycmVudC4qLywgZmFsc2UpWzBdXG4gICAgICBmbGFtZUdyYXBoLmRhdGEobm9kZSkucmVuZGVyKCcjZDMtZmxhbWUtZ3JhcGgnKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
