(function() {
  var convert, maxDepth;

  convert = function(rawData) {
    var child, childSum, fillerNode, j, k, len, len1, node, ref, ref1, state, subTree, timeElapsed, timeFormat, value;
    value = 0;
    ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
    for (j = 0, len = ref.length; j < len; j++) {
      state = ref[j];
      if (!isNaN(rawData.c[state])) {
        value += rawData.c[state];
      }
    }
    timeElapsed = new Date();
    timeElapsed.setSeconds(value);
    timeFormat = countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS;
    node = {
      name: rawData.n,
      value: value,
      time: countdown(new Date(), timeElapsed, timeFormat),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    childSum = 0;
    ref1 = rawData.a;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      child = ref1[k];
      subTree = convert(child);
      if (subTree) {
        node.children.push(subTree);
        childSum += subTree.value;
      }
    }
    if (childSum < node.value) {
      fillerNode = {
        name: '',
        value: node.value - childSum,
        filler: true
      };
      node.children.push(fillerNode);
    }
    return node;
  };

  maxDepth = function(node) {
    var max;
    if (!node) {
      return 0;
    }
    if (!node.children) {
      return 1;
    }
    if (node.maxDepth) {
      return node.maxDepth;
    }
    max = 0;
    node.children.forEach(function(child) {
      var depth;
      depth = maxDepth(child);
      if (depth > max) {
        return max = depth;
      }
    });
    node.maxDepth = max + 1;
    return node.maxDepth;
  };

  d3.json("data/profile.json", function(err, data) {
    var flameGraph, profile;
    profile = convert(data.profile);
    maxDepth(profile);
    flameGraph = d3.flameGraph().size([1200, 600]).cellHeight(20).data(profile).breadcrumbs('.breadcrumb').tooltip(true).render('#d3-flame-graph');
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(/java\.util.*/);
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    return d3.select('#zoom').on('click', function() {
      var node, root;
      root = d3.select('.flame-graph g g:first-child text').datum();
      if (root.name === 'java.util.concurrent.CountDownLatch.await') {
        return;
      }
      node = flameGraph.select(/java\.util\.concurrent.*/, false)[0];
      return flameGraph.data(node).render('#d3-flame-graph');
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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USxVQUFVLENBQUMsTUFBWCxDQUFrQixjQUFsQjthQUNSLEtBQUssQ0FBQyxPQUFOLENBQWMsV0FBZCxFQUEyQixTQUFDLENBQUQsRUFBSSxDQUFKO2VBQVUsQ0FBSSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQVYsQ0FBZSxDQUFDLE9BQWhCLENBQXdCLFdBQXhCO01BQWQsQ0FBM0I7SUFGVyxDQURmO1dBS0EsRUFBRSxDQUFDLE1BQUgsQ0FBVSxPQUFWLENBQ0UsQ0FBQyxFQURILENBQ00sT0FETixFQUNlLFNBQUE7QUFHWCxVQUFBO01BQUEsSUFBQSxHQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsbUNBQVYsQ0FBOEMsQ0FBQyxLQUEvQyxDQUFBO01BQ1AsSUFBVSxJQUFJLENBQUMsSUFBTCxLQUFhLDJDQUF2QjtBQUFBLGVBQUE7O01BR0EsSUFBQSxHQUFPLFVBQVUsQ0FBQyxNQUFYLENBQWtCLDBCQUFsQixFQUE4QyxLQUE5QyxDQUFxRCxDQUFBLENBQUE7YUFDNUQsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBcUIsQ0FBQyxNQUF0QixDQUE2QixpQkFBN0I7SUFSVyxDQURmO0VBbEIyQixDQUE3QjtBQWhEQSIsImZpbGUiOiJkZW1vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIyBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIGZyb20gYSBwYXJ0aWN1bGFyIGRhdGEgZm9ybWF0IGludG8gdGhlIGdlbmVyaWMgb25lXG4jIGV4cGVjdGVkIGJ5IHRoZSBwbHVnaW5cbmNvbnZlcnQgPSAocmF3RGF0YSkgLT5cbiAgdmFsdWUgPSAwXG4gIGZvciBzdGF0ZSBpbiBbJ1JVTk5BQkxFJywgJ0JMT0NLRUQnLCAnVElNRURfV0FJVElORycsICdXQUlUSU5HJ11cbiAgICB2YWx1ZSArPSByYXdEYXRhLmNbc3RhdGVdIGlmIG5vdCBpc05hTihyYXdEYXRhLmNbc3RhdGVdKVxuXG4gIHRpbWVFbGFwc2VkID0gbmV3IERhdGUoKVxuICB0aW1lRWxhcHNlZC5zZXRTZWNvbmRzKHZhbHVlKVxuICB0aW1lRm9ybWF0ID0gY291bnRkb3duLkRBWVMgfCBjb3VudGRvd24uSE9VUlMgfCBjb3VudGRvd24uTUlOVVRFUyB8IGNvdW50ZG93bi5TRUNPTkRTXG4gIG5vZGUgPVxuICAgIG5hbWU6IHJhd0RhdGEubixcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgdGltZTogY291bnRkb3duKG5ldyBEYXRlKCksIHRpbWVFbGFwc2VkLCB0aW1lRm9ybWF0KVxuICAgIGNoaWxkcmVuOiBbXVxuXG4gICMgdGhlIGEgZmllbGQgaXMgdGhlIGxpc3Qgb2YgY2hpbGRyZW5cbiAgcmV0dXJuIG5vZGUgaWYgbm90IHJhd0RhdGEuYVxuXG4gIGNoaWxkU3VtID0gMFxuICBmb3IgY2hpbGQgaW4gcmF3RGF0YS5hXG4gICAgc3ViVHJlZSA9IGNvbnZlcnQoY2hpbGQpXG4gICAgaWYgc3ViVHJlZVxuICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKHN1YlRyZWUpXG4gICAgICBjaGlsZFN1bSArPSBzdWJUcmVlLnZhbHVlXG5cbiAgaWYgY2hpbGRTdW0gPCBub2RlLnZhbHVlXG4gICAgZmlsbGVyTm9kZSA9XG4gICAgICBuYW1lOiAnJ1xuICAgICAgdmFsdWU6IG5vZGUudmFsdWUgLSBjaGlsZFN1bVxuICAgICAgZmlsbGVyOiB0cnVlXG4gICAgbm9kZS5jaGlsZHJlbi5wdXNoKGZpbGxlck5vZGUpXG5cbiAgbm9kZVxuXG4jIGF1Z21lbnRzIGVhY2ggbm9kZSBpbiB0aGUgdHJlZSB3aXRoIHRoZSBtYXhpbXVtIGRpc3RhbmNlXG4jIGl0IGlzIGZyb20gYSB0ZXJtaW5hbCBub2RlXG5tYXhEZXB0aCA9IChub2RlKSAtPlxuICByZXR1cm4gMCBpZiBub3Qgbm9kZVxuICByZXR1cm4gMSBpZiBub3Qgbm9kZS5jaGlsZHJlblxuICByZXR1cm4gbm9kZS5tYXhEZXB0aCBpZiBub2RlLm1heERlcHRoXG5cbiAgbWF4ID0gMFxuICBub2RlLmNoaWxkcmVuLmZvckVhY2ggKGNoaWxkKSAtPlxuICAgIGRlcHRoID0gbWF4RGVwdGgoY2hpbGQpXG4gICAgbWF4ID0gZGVwdGggaWYgZGVwdGggPiBtYXhcblxuICBub2RlLm1heERlcHRoID0gbWF4ICsgMVxuICByZXR1cm4gbm9kZS5tYXhEZXB0aFxuXG5kMy5qc29uIFwiZGF0YS9wcm9maWxlLmpzb25cIiwgKGVyciwgZGF0YSkgLT5cblxuICBwcm9maWxlID0gY29udmVydChkYXRhLnByb2ZpbGUpXG4gIG1heERlcHRoKHByb2ZpbGUpXG5cbiAgZmxhbWVHcmFwaCA9IGQzLmZsYW1lR3JhcGgoKVxuICAgIC5zaXplKFsxMjAwLCA2MDBdKVxuICAgIC5jZWxsSGVpZ2h0KDIwKVxuICAgIC5kYXRhKHByb2ZpbGUpXG4gICAgLmJyZWFkY3J1bWJzKCcuYnJlYWRjcnVtYicpXG4gICAgLnRvb2x0aXAodHJ1ZSlcbiAgICAucmVuZGVyKCcjZDMtZmxhbWUtZ3JhcGgnKVxuXG4gIGQzLnNlbGVjdCgnI2hpZ2hsaWdodCcpXG4gICAgLm9uICdjbGljaycsICgpIC0+XG4gICAgICBub2RlcyA9IGZsYW1lR3JhcGguc2VsZWN0KC9qYXZhXFwudXRpbC4qLylcbiAgICAgIG5vZGVzLmNsYXNzZWQoXCJoaWdobGlnaHRcIiwgKGQsIGkpIC0+IG5vdCBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImhpZ2hsaWdodFwiKSlcblxuICBkMy5zZWxlY3QoJyN6b29tJylcbiAgICAub24gJ2NsaWNrJywgKCkgLT5cbiAgICAgICMgY2hlY2sgdG8gc2VlIGlmIHRoZSBub2RlIGlzIG5vdCBhbHJlYWR5IHNlbGVjdGVkXG4gICAgICAjIHRoaXMgY2FuIGJlIGRvbmUgbW9yZSBlbGVnYW50bHksIHRoaXMgaXMgcXVpY2sgJiBkaXJ0eVxuICAgICAgcm9vdCA9IGQzLnNlbGVjdCgnLmZsYW1lLWdyYXBoIGcgZzpmaXJzdC1jaGlsZCB0ZXh0JykuZGF0dW0oKVxuICAgICAgcmV0dXJuIGlmIHJvb3QubmFtZSA9PSAnamF2YS51dGlsLmNvbmN1cnJlbnQuQ291bnREb3duTGF0Y2guYXdhaXQnXG5cbiAgICAgICMgcGljayB0aGUgZmlyc3QgamF2YS51dGlsLmNvbmN1cnJlbnQgbWV0aG9kLCB3ZSBrbm93IGl0J3MgdGhlIG9uZSBhYm92ZVxuICAgICAgbm9kZSA9IGZsYW1lR3JhcGguc2VsZWN0KC9qYXZhXFwudXRpbFxcLmNvbmN1cnJlbnQuKi8sIGZhbHNlKVswXVxuICAgICAgZmxhbWVHcmFwaC5kYXRhKG5vZGUpLnJlbmRlcignI2QzLWZsYW1lLWdyYXBoJykiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
